name: deploy-app

on:
  push:
    branches:
      - main
      - dev
  release:
    types: [published]

concurrency:
  group: ${{ github.ref }}

permissions:
  contents: read
  id-token: write

jobs:
  install_dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

  deploy:
    needs: [install_dependencies]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - uses: actions/cache@v3
        with:
          path: |
            .sst
          key: ${{ runner.os }}-sst

      - name: Install SST
        run: curl -fsSL https://ion.sst.dev/install | bash

      - name: Set stage-specific environment variables
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "APP_STAGE=production" >> $GITHUB_ENV
            echo "CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN_PROD }}" >> $GITHUB_ENV
            echo "CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID_PROD }}" >> $GITHUB_ENV
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_PROD }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}" >> $GITHUB_ENV
            echo "DB_URL=${{ secrets.DB_URL_PROD }}" >> $GITHUB_ENV
            echo "JWT_SECRET=${{ secrets.JWT_SECRET_PROD }}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == "dev" ]]; then
            echo "APP_STAGE=development" >> $GITHUB_ENV
            echo "CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN_DEV }}" >> $GITHUB_ENV
            echo "CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID_DEV }}" >> $GITHUB_ENV
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_DEV }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}" >> $GITHUB_ENV
            echo "DB_URL=${{ secrets.DB_URL_DEV }}" >> $GITHUB_ENV
            echo "JWT_SECRET=${{ secrets.JWT_SECRET_DEV }}" >> $GITHUB_ENV
          fi

      - name: Generate .env file
        run: |
          echo "DB_URL=$DB_URL" >> .env
          echo "JWT_SECRET=$JWT_SECRET" >> .env
          echo "CLOUDFLARE_API_TOKEN=$CLOUDFLARE_API_TOKEN" >> .env
          echo "CLOUDFLARE_ACCOUNT_ID=$CLOUDFLARE_ACCOUNT_ID" >> .env
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> .env
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> .env

      - name: Load secrets into SST
        run: npx sst secrets load .env --stage $APP_STAGE

      - name: Deploy to SST (AWS)
        run: sst deploy --stage $APP_STAGE --verbose

      - name: Push secrets to Cloudflare
        run: npx wrangler secret bulk .env --env $APP_STAGE

      - name: Deploy to Cloudflare
        run: npx wrangler deploy --env $APP_STAGE
        env:
          CLOUDFLARE_API_TOKEN: $CLOUDFLARE_API_TOKEN
