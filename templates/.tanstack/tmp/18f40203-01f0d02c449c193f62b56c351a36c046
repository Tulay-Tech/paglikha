/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/Settings'
import { Route as ReportsRouteImport } from './routes/Reports'
import { Route as PendingActionsRouteImport } from './routes/PendingActions'
import { Route as OnboardingRouteImport } from './routes/Onboarding'
import { Route as MyAccountRouteImport } from './routes/MyAccount'
import { Route as IntegrationsRouteImport } from './routes/Integrations'
import { Route as EmployeesRouteImport } from './routes/Employees'
import { Route as BillingRouteImport } from './routes/Billing'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { ServerRoute as ApiUsersServerRouteImport } from './routes/api/users'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const SettingsRoute = SettingsRouteImport.update({
  id: '/Settings',
  path: '/Settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ReportsRoute = ReportsRouteImport.update({
  id: '/Reports',
  path: '/Reports',
  getParentRoute: () => rootRouteImport,
} as any)
const PendingActionsRoute = PendingActionsRouteImport.update({
  id: '/PendingActions',
  path: '/PendingActions',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingRoute = OnboardingRouteImport.update({
  id: '/Onboarding',
  path: '/Onboarding',
  getParentRoute: () => rootRouteImport,
} as any)
const MyAccountRoute = MyAccountRouteImport.update({
  id: '/MyAccount',
  path: '/MyAccount',
  getParentRoute: () => rootRouteImport,
} as any)
const IntegrationsRoute = IntegrationsRouteImport.update({
  id: '/Integrations',
  path: '/Integrations',
  getParentRoute: () => rootRouteImport,
} as any)
const EmployeesRoute = EmployeesRouteImport.update({
  id: '/Employees',
  path: '/Employees',
  getParentRoute: () => rootRouteImport,
} as any)
const BillingRoute = BillingRouteImport.update({
  id: '/Billing',
  path: '/Billing',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiUsersServerRoute = ApiUsersServerRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Billing': typeof BillingRoute
  '/Employees': typeof EmployeesRoute
  '/Integrations': typeof IntegrationsRoute
  '/MyAccount': typeof MyAccountRoute
  '/Onboarding': typeof OnboardingRoute
  '/PendingActions': typeof PendingActionsRoute
  '/Reports': typeof ReportsRoute
  '/Settings': typeof SettingsRoute
  '/auth/login': typeof AuthLoginRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Billing': typeof BillingRoute
  '/Employees': typeof EmployeesRoute
  '/Integrations': typeof IntegrationsRoute
  '/MyAccount': typeof MyAccountRoute
  '/Onboarding': typeof OnboardingRoute
  '/PendingActions': typeof PendingActionsRoute
  '/Reports': typeof ReportsRoute
  '/Settings': typeof SettingsRoute
  '/auth/login': typeof AuthLoginRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/Billing': typeof BillingRoute
  '/Employees': typeof EmployeesRoute
  '/Integrations': typeof IntegrationsRoute
  '/MyAccount': typeof MyAccountRoute
  '/Onboarding': typeof OnboardingRoute
  '/PendingActions': typeof PendingActionsRoute
  '/Reports': typeof ReportsRoute
  '/Settings': typeof SettingsRoute
  '/auth/login': typeof AuthLoginRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Billing'
    | '/Employees'
    | '/Integrations'
    | '/MyAccount'
    | '/Onboarding'
    | '/PendingActions'
    | '/Reports'
    | '/Settings'
    | '/auth/login'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/Billing'
    | '/Employees'
    | '/Integrations'
    | '/MyAccount'
    | '/Onboarding'
    | '/PendingActions'
    | '/Reports'
    | '/Settings'
    | '/auth/login'
  id:
    | '__root__'
    | '/'
    | '/Billing'
    | '/Employees'
    | '/Integrations'
    | '/MyAccount'
    | '/Onboarding'
    | '/PendingActions'
    | '/Reports'
    | '/Settings'
    | '/auth/login'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BillingRoute: typeof BillingRoute
  EmployeesRoute: typeof EmployeesRoute
  IntegrationsRoute: typeof IntegrationsRoute
  MyAccountRoute: typeof MyAccountRoute
  OnboardingRoute: typeof OnboardingRoute
  PendingActionsRoute: typeof PendingActionsRoute
  ReportsRoute: typeof ReportsRoute
  SettingsRoute: typeof SettingsRoute
  AuthLoginRoute: typeof AuthLoginRoute
}
export interface FileServerRoutesByFullPath {
  '/api/users': typeof ApiUsersServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/users': typeof ApiUsersServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/users': typeof ApiUsersServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/users' | '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/users' | '/api/auth/$'
  id: '__root__' | '/api/users' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiUsersServerRoute: typeof ApiUsersServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/Settings': {
      id: '/Settings'
      path: '/Settings'
      fullPath: '/Settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Reports': {
      id: '/Reports'
      path: '/Reports'
      fullPath: '/Reports'
      preLoaderRoute: typeof ReportsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/PendingActions': {
      id: '/PendingActions'
      path: '/PendingActions'
      fullPath: '/PendingActions'
      preLoaderRoute: typeof PendingActionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Onboarding': {
      id: '/Onboarding'
      path: '/Onboarding'
      fullPath: '/Onboarding'
      preLoaderRoute: typeof OnboardingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/MyAccount': {
      id: '/MyAccount'
      path: '/MyAccount'
      fullPath: '/MyAccount'
      preLoaderRoute: typeof MyAccountRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Integrations': {
      id: '/Integrations'
      path: '/Integrations'
      fullPath: '/Integrations'
      preLoaderRoute: typeof IntegrationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Employees': {
      id: '/Employees'
      path: '/Employees'
      fullPath: '/Employees'
      preLoaderRoute: typeof EmployeesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Billing': {
      id: '/Billing'
      path: '/Billing'
      fullPath: '/Billing'
      preLoaderRoute: typeof BillingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BillingRoute: BillingRoute,
  EmployeesRoute: EmployeesRoute,
  IntegrationsRoute: IntegrationsRoute,
  MyAccountRoute: MyAccountRoute,
  OnboardingRoute: OnboardingRoute,
  PendingActionsRoute: PendingActionsRoute,
  ReportsRoute: ReportsRoute,
  SettingsRoute: SettingsRoute,
  AuthLoginRoute: AuthLoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiUsersServerRoute: ApiUsersServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
